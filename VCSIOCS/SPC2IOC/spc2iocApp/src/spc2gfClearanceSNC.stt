program spc2gfClearanceSNC

%{
#include "vcs_var_mes.h" // define this here so C functions are seen
	
#define	STOK       	0
#define FAIL		 -1
#define WFVC		55
#define B46ON       163
#define B47OFF      164
#define B47ON  		165
#define B48OFF		166  
#define	RA3ON	    144
#define	A007ON     	159
#define	DA3ON	    160	
#define	DA3OFF		161	
#define	DA3aON		167
#define	G6aON       162
#define SPC2GFPNK	20 
}%
/* Declare seq variables*/
short SPC2GF_VC;   
short SPC2GF_W46_STS;
short SPC2GF_W47_STS;
short SPC2GF_W48_STS;
short SPC2GF_RST_OUTS;
short SPC2GF_FAIL_COND;
short SPC2GF_PNK;
string SPC2GF_CLR_STATS; 
string SPC2GF_INTLCK_STATS;

// CONTROL FLAGS
short SPC2GF_OLD_FAIL_COND;
short SPC2GF_FAILED_RST = FALSE;

/* Associate SNL variables with epics output pv's*/
assign	SPC2GF_RST_OUTS		to	"{SYS}:RST-SPC2GF.PROC"; 
assign	SPC2GF_CLR_STATS	to	"{SYS}:SPC2GF-CLR-STATS"; 
assign	SPC2GF_INTLCK_STATS to	"{SYS}:SPC2GF-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	SPC2GF_VC 		    to 	"{SYS}:SPC2GF-VC"; 
assign 	SPC2GF_W46_STS 		to  "{SYS}:SPC2-W46-STS"; 
assign 	SPC2GF_W47_STS 		to  "{SYS}:SPC2-W47-STS";   
assign 	SPC2GF_W48_STS 		to  "{SYS}:SPC2-W48-STS";
assign	SPC2GF_FAIL_COND	to	"{SYS}:SPC2GF-FAIL-COND";
assign	SPC2GF_PNK		    to	"{SYS}:SPC2GF-PNK";

// monitor changes
monitor	SPC2GF_VC;
monitor SPC2GF_W46_STS; 
monitor SPC2GF_W47_STS;   
monitor SPC2GF_W48_STS;
monitor	SPC2GF_FAIL_COND;
monitor	SPC2GF_PNK;

ss SPC2GF_clearance_status {
    state init {
		  when (delay(2)) {
			  initVault();
			  printf("%sSPC2 GROUND-FLOOR VAULT INITIALISATION COMPLETED%s\n",OK,DEF);
		  } state watchman_46_pressed	
    }
//////////////////////////////////////////////////////////

	state watchman_46_pressed {

		when (SPC2GF_FAIL_COND != STOK) {
			SPC2GF_OLD_FAIL_COND = SPC2GF_FAIL_COND;
		} state  clearance_faillures
        
		when (SPC2GF_W46_STS == WFVC) {

		} state  clearance_pending       
			
		when (SPC2GF_W46_STS == B46ON) {
			SPC2GF_clear_underway();
			SPC2GF_update_report(B46ON);
		} state watchman_46_released
	}
//////////////////////////////////////////////////////////
	state clearance_pending {
    option -e;
		option -x;
   
		entry {
            resetVault();
            SPC2GF_update_report(WFVC);
		}
   
		when (SPC2GF_W46_STS != WFVC) {

		} state watchman_46_pressed  		

	}
//////////////////////////////////////////////////////////
	state watchman_46_released {
		
		when (SPC2GF_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (SPC2GF_W46_STS != B46ON) {
			SPC2GF_update_report(B47OFF);
		} state watchman_47_pressed
	}
//////////////////////////////////////////////////////////
	state watchman_47_pressed {

		when (SPC2GF_FAIL_COND != STOK) {

		} state   clearance_faillures
		
		
		when (SPC2GF_W47_STS == B47ON) {
			SPC2GF_update_report(B47ON);
		} state watchman_47_released
	}
//////////////////////////////////////////////////////////
	state watchman_47_released {
		
		when (SPC2GF_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (SPC2GF_W47_STS != B47ON) {
;
		} state door_A3_closed
		
	}
///////////////////////////////////////////////////////////
	state door_A3_closed {
 
		option -e;

		entry {
		  SPC2GF_update_report(DA3OFF);
		}  
		
		when (SPC2GF_FAIL_COND != STOK) {

		} state  clearance_faillures
		
		when (SPC2GF_W48_STS != DA3OFF) {			

		} state  watchman_48_pressed
	}
///////////////////////////////////////////////////////////
	state watchman_48_pressed {

		option -e;
		entry {
			SPC2GF_update_report(B48OFF);
		}
    		
		when (SPC2GF_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (!SPC2GF_W48_STS) {

			SPC2GF_status();
		} state vault_cleared
   
		when (SPC2GF_W48_STS != B48OFF) {
            
		} state door_A3_closed 
	} 
///////////////////////////////////////////////////////////////
  state vault_cleared {
		option -e;
		entry {
			printf("%sSPC2 GROUND-FLOOR VAULT IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (SPC2GF_VC != STOK) {

		} state paniq_faillure
	}
///////////////////////////////////////////////////   
  state paniq_faillure {

		when (SPC2GF_VC != SPC2GFPNK) {

		} state clearance_faillures	
 
 		when () { // paniq button released?
            printf("SPC2GF VAULT CLEARED FAILURE CONDITION: ");
            SPC2GF_update_failed(SPC2GFPNK); 

		} state recover_from_paniq	     
	}
////////////////////////////////////////////////////////////    
   	state recover_from_paniq {
		option -e;
		option -x;
		when (!SPC2GF_PNK) { // paniq button released?
        // we only go to this state so we enter watchman_147_pressed from one point(recover_from_faillure)
		} state recover_from_faillure  

		exit {
            SPC2GF_FAILED_RST = FALSE;
		}
	}
//////////////////////////////////////////////////////////////////
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
		    printf("SPC2 GROUND-FLOOR CLEARANCE FAILURE CONDITION: ");
			SPC2GF_FAILED_RST = FALSE;
			SPC2GF_OLD_FAIL_COND = SPC2GF_FAIL_COND;
            SPC2GF_update_failed(SPC2GF_FAIL_COND == FAIL ? STOK : SPC2GF_FAIL_COND); // we cannot index -1(FAIL)
		}
   
		when () {
		
		} state recover_from_faillure  	
	}
//////////////////////////////////////////////////////////
	state recover_from_faillure {
  
		when (!SPC2GF_FAIL_COND) {
            printf("%sSPC2 GROUND-FLOOR RECOVERING FROM FAILLURE : ENTERING W9 STATE%s\n",OK,DEF);
		} state  watchman_46_pressed
   
		when (SPC2GF_FAIL_COND != SPC2GF_OLD_FAIL_COND) {

		} state  clearance_faillures
	} 
}
//////////////////////////////////////////////////////////////////////
void initVault(){
	//SPC2GF_INIT = TRUE;
    SPC2GF_RST_OUTS  = TRUE;
    SPC2GF_OLD_FAIL_COND = SPC2GF_FAIL_COND;
	not_cleared(SPC2GF_CLR_STATS);
	report_error(SPC2GF_INTLCK_STATS, 0);
    pvPut(SPC2GF_RST_OUTS, SYNC);
	//pvPut(SPC2GF_INIT, SYNC);
	pvPut(SPC2GF_CLR_STATS, SYNC);
	pvPut(SPC2GF_INTLCK_STATS, SYNC);
}

////////////////////////////////////////////////////////////////////////
void resetVault(){
	not_cleared(SPC2GF_CLR_STATS);
	pvPut(SPC2GF_CLR_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SPC2GF_update_failed(short report)
{
	clear_failed(SPC2GF_CLR_STATS);
	pvPut(SPC2GF_CLR_STATS, SYNC);
	report_error(SPC2GF_INTLCK_STATS, report);
	pvPut(SPC2GF_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,SPC2GF_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void SPC2GF_update_report(short intlck) {
	report_error(SPC2GF_INTLCK_STATS, intlck);
	pvPut(SPC2GF_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SPC2GF_status()
{  
	cleared(SPC2GF_CLR_STATS);
	pvPut(SPC2GF_CLR_STATS, SYNC); 		
	report_error(SPC2GF_INTLCK_STATS, 0);
	pvPut(SPC2GF_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void SPC2GF_clear_underway()
{  
	clear_underway(SPC2GF_CLR_STATS);
	pvPut(SPC2GF_CLR_STATS, SYNC); 		
}
/**********************************************************/

