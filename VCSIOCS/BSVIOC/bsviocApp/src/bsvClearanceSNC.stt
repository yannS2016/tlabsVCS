program bsvClearanceSNC

%{
#include "vcs_var_mes.h" // define this here so C functions are seen
#define STOK        0
#define WFVC        55
#define	B37OFF      128
#define	B36ON       127
#define DA15S1OFF   129
#define DA15S2OFF   130
#define BSVPNK      125
}%

/* Declare seq variables*/
/* Declare seq variables*/
short BSV_INIT; 
short BSV_VC;   
short BSV_W36_STS;
short BSV_W37_STS;
short BSV_FAIL_COND;
short BSV_PNK;
short BSV_RST_OUTS;
string BSV_CLR_STATS; 
string BSV_INTLCK_STATS;
// CONTROL FLAGS
short BSV_failed_rst;
short BSV_OLD_FAIL_COND;
short BSV_not_cleared = FALSE;

/* Associate SNL variables with epics output pv's*/
assign	BSV_RST_OUTS        to	"{SYS}:RST-BSV.PROC"; 
assign	BSV_CLR_STATS       to	"{SYS}:BSV-CLR-STATS"; 
assign	BSV_INTLCK_STATS	to  "{SYS}:BSV-INTLCK-STATS"; 

/* Associate SNL variables with epics input pv's*/
assign 	BSV_VC 		        to 	"{SYS}:BSV-VC"; 
assign 	BSV_W36_STS 		to 	"{SYS}:BSV-W36-STS";   
assign 	BSV_W37_STS 		to 	"{SYS}:BSV-W37-STS";
assign	BSV_FAIL_COND		to  "{SYS}:BSV-FAIL-COND";
assign	BSV_PNK		        to  "{SYS}:BSV-PNK";

monitor	BSV_VC;
monitor BSV_W36_STS;  
monitor BSV_W37_STS;
monitor	BSV_FAIL_COND;
monitor	BSV_PNK;

ss BSV_clearance_status {
    
    state init {
		  when (delay(1)) {
			  initVault();
			  printf("\n%sBSV VAULT INITIALISATION COMPLETED%s\n",OK,DEF);
		  }   state watchman_36_pressed	
    }
//////////////////////////////////////////////////////////
	state watchman_36_pressed {
 
    when (BSV_FAIL_COND != STOK) {
      BSV_OLD_FAIL_COND = BSV_FAIL_COND;
    } state  clearance_faillures
     
    
		when (BSV_W36_STS == WFVC) {

		} state clearance_pending  
			
		when (BSV_W36_STS == B36ON) {
			BSV_clear_underway();
			BSV_update_report(B36ON);
		} state watchman_36_released
	}
 ////////////////////////////////////////////////////////////////
	state clearance_pending {
		option -e;
		option -x;
		entry {
            resetVault();
            BSV_update_report(WFVC);
            BSV_not_cleared = TRUE; // we use this to tell user to start or restart vault clearance
		}
		when (BSV_W36_STS != WFVC) {

		} state watchman_36_pressed  		
	}
 //////////////////////////////////////////////////////////
	state watchman_36_released {
		
		when (BSV_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (BSV_W36_STS != B36ON) {
   
		} state A15_switch_I_closed
	}   
//////////////////////////////////////////////////////////
	state A15_switch_I_closed {
        
		option -e;

		entry {
            BSV_update_report(DA15S1OFF);
		} 

		when (BSV_FAIL_COND != STOK) {

		} state   clearance_faillures
		
		when (BSV_W37_STS != DA15S1OFF) {
            
		} state A15_switch_II_closed
        
	}
 //////////////////////////////////////////////////////////
	state A15_switch_II_closed {
 
		option -e;

		entry {
            BSV_update_report(DA15S2OFF);
		} 

		when (BSV_FAIL_COND != STOK) {

		} state   clearance_faillures
   
   // previous switch might have opened up
		when (BSV_W37_STS == DA15S1OFF) {

		} state A15_switch_I_closed
		
		when (BSV_W37_STS != DA15S2OFF) {

		} state watchman_37_pressed
	}
///////////////////////////////////////////////////////////
	state watchman_37_pressed {
 
		option -e;

		entry {
            BSV_update_report(B37OFF);
		} 
		
		when (BSV_FAIL_COND != STOK) {

		} state  clearance_faillures
			
			
		when (BSV_W37_STS == STOK) {
		} state vault_cleared
   
   /// must be last
		when (BSV_W37_STS != B37OFF) {
            
		} state A15_switch_I_closed 
	} 
///////////////////////////////////////////////////////////////
    state vault_cleared {
		option -e;
		entry {
            BSV_status();
			printf("%sBSV VAULT IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (BSV_VC != STOK) {

		} state paniq_faillure
	
    } 
 ///////////////////////////////////////////////////   
    state paniq_faillure {

        when (BSV_VC != BSVPNK) {

        } state clearance_faillures	
 
        when () { // paniq button released?
            printf("BSV VAULT CLEARED FAILURE CONDITION: ");
            BSV_update_failed(BSVPNK); 
        } state recover_from_paniq	     
    } 
////////////////////////////////////////////////////////////    
    state recover_from_paniq {
		option -e;
		option -x;
		when (!BSV_PNK) { // paniq button released?
        // we only go to this state so we enter watchman_36_pressed from one point(recover_from_faillure)
		} state recover_from_faillure  

		exit {
            BSV_failed_rst = FALSE;
            BSV_not_cleared = FALSE;
            //printf("%sBSV RECOVERING FROM PANIQ FAILLURE : ENTERING W36 STATE%s\n",OK,DEF);
		}
	} 
 ///////////////////////////////////////////////////   
    state clearance_faillures {
		option -e;
		option -x;
		entry {
            printf("BSV CLEARANCE FAILURE CONDITION: ");
            BSV_failed_rst = FALSE;
            BSV_not_cleared = FALSE;
            BSV_OLD_FAIL_COND = BSV_FAIL_COND;
            BSV_update_failed(BSV_FAIL_COND); // we cannot index -1(FAIL)
		}
   
		when () { // seq excute faster than recor logi
		} state recover_from_faillure	   
	} 
//////////////////////////////////////////////////////////
	state recover_from_faillure {
		
		when (BSV_FAIL_COND ==  STOK) {
      printf("%sBSV RECOVERING FROM CLEARANCE  FAILLURE : ENTERING W36 STATE%s\n",OK,DEF);
		} state  watchman_36_pressed
			
		when (BSV_FAIL_COND != BSV_OLD_FAIL_COND) {
           
		} state  clearance_faillures
	}   
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
    BSV_OLD_FAIL_COND = BSV_FAIL_COND;
    BSV_RST_OUTS  = TRUE;
	not_cleared(BSV_CLR_STATS);
	report_error(BSV_INTLCK_STATS, 0);
    pvPut(BSV_RST_OUTS, SYNC);
	pvPut(BSV_CLR_STATS, SYNC);
	pvPut(BSV_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void resetVault(){
	not_cleared(BSV_CLR_STATS);
	pvPut(BSV_CLR_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void BSV_update_failed(short report)
{
	clear_failed(BSV_CLR_STATS);
	pvPut(BSV_CLR_STATS, SYNC);
	report_error(BSV_INTLCK_STATS, report);
	pvPut(BSV_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,BSV_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void BSV_update_report(short intlck) {
	report_error(BSV_INTLCK_STATS, intlck);
	pvPut(BSV_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void BSV_status()
{
	cleared(BSV_CLR_STATS);
	pvPut(BSV_CLR_STATS, SYNC); 		
	report_error(BSV_INTLCK_STATS, 0);
	pvPut(BSV_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void BSV_clear_underway()
{  
	clear_underway(BSV_CLR_STATS);
	pvPut(BSV_CLR_STATS, SYNC); 		
}

//////////////////////////////////////////////////////////////////////////
%{

inline void cleared(string vault_status) {   
    strcpy(vault_status, mes_array[1]); // Area cleared  
}
////////////////////////////////////////////////
inline void not_cleared(string vault_status) {  
   strcpy(vault_status, mes_array[2]); // Area not cleared    
}
///////////////////////////////////////////////
inline void clear_underway(string vault_status) { 
   strcpy(vault_status, mes_array[3]);  // Area clearance underway    
}
//////////////////////////////////////////////
inline void clear_failed(string vault_status) { 
   strcpy(vault_status, mes_array[5]); // Area clearance fail   
}
////////////////////////////////////////////////
inline void report_error(string vault_interlock, short intlock)
{
   strcpy(vault_interlock, mes_array[intlock]);
}
	
}%