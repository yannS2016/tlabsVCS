program vliClearanceSNC

%{
#include "vcs_var_mes.h" // define this here so C functions are seen
#define STOK        0
#define WFVC        55
#define	B33OFF      97
#define	B32ON       94
#define	DA004ON     93
#define DA004S1OFF	95 
#define DA004S2OFF	96
#define VLIPNK      135
}%

/* Declare seq variables*/
/* Declare seq variables*/
short VLI_INIT; 
short VLI_VC;   
short VLI_W32_STS;
short VLI_W33_STS;
short VLI_FAIL_COND;
short VLI_PNK;
short VLI_RST_OUTS;
string VLI_CLR_STATS; 
string VLI_INTLCK_STATS;
// CONTROL FLAGS
short VLI_failed_rst;
short VLI_OLD_FAIL_COND;
short VLI_not_cleared = FALSE;

/* Associate SNL variables with epics output pv's*/
assign	VLI_RST_OUTS        to	"{SYS}:RST-VLI.PROC"; 
assign	VLI_CLR_STATS       to	"{SYS}:VLI-CLR-STATS"; 
assign	VLI_INTLCK_STATS	to  "{SYS}:VLI-INTLCK-STATS"; 

/* Associate SNL variables with epics input pv's*/
assign 	VLI_VC 		        to 	"{SYS}:VLI-VC"; 
assign 	VLI_W32_STS 		to 	"{SYS}:VLI-W32-STS";   
assign 	VLI_W33_STS 		to 	"{SYS}:VLI-W33-STS";
assign	VLI_FAIL_COND		to  "{SYS}:VLI-FAIL-COND";
assign	VLI_PNK		        to  "{SYS}:VLI-PNK";

monitor	VLI_VC;
monitor VLI_W32_STS;  
monitor VLI_W33_STS;
monitor	VLI_FAIL_COND;
monitor	VLI_PNK;

ss VLI_clearance_status {
    
    state init {
		  when (delay(1)) {
			  initVault();
			  printf("\n%sVERTICAL BEAMLINE VAULT INITIALISATION COMPLETED%s\n",OK,DEF);
		  }   state watchman_32_pressed	
    }
//////////////////////////////////////////////////////////
	state watchman_32_pressed {
 
    when (VLI_FAIL_COND != STOK) {
      VLI_OLD_FAIL_COND = VLI_FAIL_COND;
    } state  clearance_faillures
     
    
		when (VLI_W32_STS == WFVC) {

		} state clearance_pending  
			
		when (VLI_W32_STS == B32ON) {
			VLI_clear_underway();
			VLI_update_report(B32ON);
		} state watchman_32_released
	}
 ////////////////////////////////////////////////////////////////
	state clearance_pending {
		option -e;
		option -x;
		entry {
            resetVault();
            VLI_update_report(WFVC);
            VLI_not_cleared = TRUE; // we use this to tell user to start or restart vault clearance
		}
		when (VLI_W32_STS != WFVC) {

		} state watchman_32_pressed  		
	}
 //////////////////////////////////////////////////////////
	state watchman_32_released {
		
		when (VLI_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (VLI_W32_STS != B32ON) {
   
		} state A004_switch_I_closed
	}   
//////////////////////////////////////////////////////////
	state A004_switch_I_closed {
        
		option -e;

		entry {
            VLI_update_report(DA004S1OFF);
		} 

		when (VLI_FAIL_COND != STOK) {

		} state   clearance_faillures
		
		when (VLI_W33_STS != DA004S1OFF) {
            
		} state A004_switch_II_closed
        
	}
 //////////////////////////////////////////////////////////
	state A004_switch_II_closed {
 
		option -e;

		entry {
            VLI_update_report(DA004S2OFF);
		} 

		when (VLI_FAIL_COND != STOK) {

		} state   clearance_faillures
   
   // previous switch might have opened up
		when (VLI_W33_STS == DA004S1OFF) {

		} state A004_switch_I_closed
		
		when (VLI_W33_STS != DA004S2OFF) {

		} state watchman_33_pressed
	}
///////////////////////////////////////////////////////////
	state watchman_33_pressed {
 
		option -e;

		entry {
            VLI_update_report(B33OFF);
		} 
		
		when (VLI_FAIL_COND != STOK) {

		} state  clearance_faillures
			
			
		when (VLI_W33_STS == STOK) {
		} state vault_cleared
   
        /// must be last
		when (VLI_W33_STS != B33OFF) {
            
		} state A004_switch_I_closed 
	} 
///////////////////////////////////////////////////////////////
  state vault_cleared {
		option -e;
		entry {
      VLI_status();
			printf("%sVERTICAL BEAMLINE VAULT IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (VLI_VC != STOK) {

		} state paniq_faillure
	
	} 
 ///////////////////////////////////////////////////   
  state paniq_faillure {

    when (VLI_VC != VLIPNK) {

		} state clearance_faillures	
 
    when () { // paniq button released?
      printf("VLI VAULT CLEARED FAILURE CONDITION: ");
      VLI_update_failed(VLIPNK); 
		} state recover_from_paniq	     
	} 
////////////////////////////////////////////////////////////    
  state recover_from_paniq {
		option -e;
		option -x;
		when (!VLI_PNK) { // paniq button released?
        // we only go to this state so we enter watchman_32_pressed from one point(recover_from_faillure)
		} state recover_from_faillure  

		exit {
      VLI_failed_rst = FALSE;
      VLI_not_cleared = FALSE;
      //printf("%sVLI RECOVERING FROM PANIQ FAILLURE : ENTERING W32 STATE%s\n",OK,DEF);
		}
	} 
 ///////////////////////////////////////////////////   
  state clearance_faillures {
		option -e;
		option -x;
		entry {
            printf("VLI CLEARANCE FAILURE CONDITION: ");
            VLI_failed_rst = FALSE;
            VLI_not_cleared = FALSE;
            VLI_OLD_FAIL_COND = VLI_FAIL_COND;
            VLI_update_failed(VLI_FAIL_COND); // we cannot index -1(FAIL)
		}
   
		when () { // seq excute faster than recor logi
		} state recover_from_faillure	   
	} 
//////////////////////////////////////////////////////////
	state recover_from_faillure {
		
		when (VLI_FAIL_COND ==  STOK) {
      printf("%sVLI RECOVERING FROM CLEARANCE  FAILLURE : ENTERING W32 STATE%s\n",OK,DEF);
		} state  watchman_32_pressed
			
		when (VLI_FAIL_COND != VLI_OLD_FAIL_COND) {
           
		} state  clearance_faillures
	}   
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
  VLI_OLD_FAIL_COND = VLI_FAIL_COND;
  VLI_RST_OUTS  = TRUE;
	not_cleared(VLI_CLR_STATS);
	report_error(VLI_INTLCK_STATS, 0);
  pvPut(VLI_RST_OUTS, SYNC);
	pvPut(VLI_CLR_STATS, SYNC);
	pvPut(VLI_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void resetVault(){
	not_cleared(VLI_CLR_STATS);
	pvPut(VLI_CLR_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void VLI_update_failed(short report)
{
	clear_failed(VLI_CLR_STATS);
	pvPut(VLI_CLR_STATS, SYNC);
	report_error(VLI_INTLCK_STATS, report);
	pvPut(VLI_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,VLI_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void VLI_update_report(short intlck) {
	report_error(VLI_INTLCK_STATS, intlck);
	pvPut(VLI_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void VLI_status()
{
	cleared(VLI_CLR_STATS);
	pvPut(VLI_CLR_STATS, SYNC); 		
	report_error(VLI_INTLCK_STATS, 0);
	pvPut(VLI_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void VLI_clear_underway()
{  
	clear_underway(VLI_CLR_STATS);
	pvPut(VLI_CLR_STATS, SYNC); 		
}

//////////////////////////////////////////////////////////////////////////
%{

inline void cleared(string vault_status) {   
    strcpy(vault_status, mes_array[1]); // Area cleared  
}
////////////////////////////////////////////////
inline void not_cleared(string vault_status) {  
   strcpy(vault_status, mes_array[2]); // Area not cleared    
}
///////////////////////////////////////////////
inline void clear_underway(string vault_status) { 
   strcpy(vault_status, mes_array[3]);  // Area clearance underway    
}
//////////////////////////////////////////////
inline void clear_failed(string vault_status) { 
   strcpy(vault_status, mes_array[5]); // Area clearance fail   
}
////////////////////////////////////////////////
inline void report_error(string vault_interlock, short intlock)
{
   strcpy(vault_interlock, mes_array[intlock]);
}
	
}%