program speClearanceSNC

%{
#include "vcs_var_mes.h" // define this here so C functions are seen
#define STOK        0
#define FAIL        -1
#define WFVC        55
#define	B25OFF      116
#define	B24ON       115
#define DA9S1OFF    117
#define DA9S2OFF    118
#define SPEPNK      113 
}%

/* Declare seq variables*/
/* Declare seq variables*/
short SPE_INIT; 
short SPE_VC;   
short SPE_W24_STS;
short SPE_W25_STS;
short SPE_FAIL_COND;
short SPE_PNK;
short SPE_RST_OUTS;
string SPE_CLR_STATS; 
string SPE_INTLCK_STATS;
// CONTROL FLAGS
short SPE_failed_rst;
short SPE_OLD_FAIL_COND;
short SPE_not_cleared = FALSE;

/* Associate SNL variables with epics output pv's*/
assign	SPE_RST_OUTS        to	"{SYS}:RST-SPE.PROC"; 
assign	SPE_CLR_STATS       to	"{SYS}:SPE-CLR-STATS"; 
assign	SPE_INTLCK_STATS	  to  "{SYS}:SPE-INTLCK-STATS"; 

/* Associate SNL variables with epics input pv's*/
assign 	SPE_VC 		          to 	"{SYS}:SPE-VC"; 
assign 	SPE_W24_STS 		    to 	"{SYS}:SPE-W24-STS";   
assign 	SPE_W25_STS 		    to 	"{SYS}:SPE-W25-STS";
assign	SPE_FAIL_COND		    to  "{SYS}:SPE-FAIL-COND";
assign	SPE_PNK		          to  "{SYS}:SPE-PNK";

monitor	SPE_VC;
monitor SPE_W24_STS;  
monitor SPE_W25_STS;
monitor	SPE_FAIL_COND;
monitor	SPE_PNK;

ss SPE_clearance_status {
    
    state init {
		  when (delay(1)) {
			  initVault();
			  printf("\n%sSPECTROMETER VAULT INITIALISATION COMPLETED%s\n",OK,DEF);
		  }   state watchman_24_pressed	
    }
//////////////////////////////////////////////////////////
	state watchman_24_pressed {
 
    when (SPE_FAIL_COND != STOK) {
      SPE_OLD_FAIL_COND = SPE_FAIL_COND;
    } state  clearance_faillures
     
    
		when (SPE_W24_STS == WFVC) {

		} state clearance_pending  
			
		when (SPE_W24_STS == B24ON) {
			SPE_clear_underway();
			SPE_update_report(B24ON);
		} state watchman_24_released
	}
 ////////////////////////////////////////////////////////////////
	state clearance_pending {
		option -e;
		option -x;
		entry {
      resetVault();
      SPE_update_report(WFVC);
      SPE_not_cleared = TRUE; // we use this to tell user to start or restart vault clearance
		}
		when (SPE_W24_STS != WFVC) {

		} state watchman_24_pressed  		
	}
 //////////////////////////////////////////////////////////
	state watchman_24_released {
		
		when (SPE_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (SPE_W24_STS != B24ON) {
   
		} state A9_switch_I_closed
	}   
//////////////////////////////////////////////////////////
	state A9_switch_I_closed {
        
		option -e;

		entry {
      SPE_update_report(DA9S1OFF);
		} 

		when (SPE_FAIL_COND != STOK) {

		} state   clearance_faillures
		
		when (SPE_W25_STS != DA9S1OFF) {
            
		} state A9_switch_II_closed
        
	}
 //////////////////////////////////////////////////////////
	state A9_switch_II_closed {
 
		option -e;

		entry {
      SPE_update_report(DA9S2OFF);
		} 

		when (SPE_FAIL_COND != STOK) {

		} state   clearance_faillures
   
   // previous switch might have opened up
		when (SPE_W25_STS == DA9S1OFF) {

		} state A9_switch_I_closed
		
		when (SPE_W25_STS != DA9S2OFF) {

		} state watchman_25_pressed
	}
///////////////////////////////////////////////////////////
	state watchman_25_pressed {
 
		option -e;

		entry {
      SPE_update_report(B25OFF);
		} 
		
		when (SPE_FAIL_COND != STOK) {

		} state  clearance_faillures
			
			
		when (SPE_W25_STS == STOK) {
		} state vault_cleared
   
   /// must be last
		when (SPE_W25_STS != B25OFF) {
            
		} state A9_switch_I_closed 
	} 
///////////////////////////////////////////////////////////////
  state vault_cleared {
		option -e;
		entry {
      SPE_status();
			printf("%sSPECTROMETER VAULT IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (SPE_VC != STOK) {

		} state paniq_faillure
	
	} 
 ///////////////////////////////////////////////////   
  state paniq_faillure {

    when (SPE_VC != SPEPNK) {

		} state clearance_faillures	
 
    when () { // paniq button released?
      printf("SPE VAULT CLEARED FAILURE CONDITION: ");
      SPE_update_failed(SPEPNK); 
		} state recover_from_paniq	     
	} 
////////////////////////////////////////////////////////////    
  state recover_from_paniq {
		option -e;
		option -x;
		when (!SPE_PNK) { // paniq button released?
        // we only go to this state so we enter watchman_24_pressed from one point(recover_from_faillure)
		} state recover_from_faillure  

		exit {
      SPE_failed_rst = FALSE;
      SPE_not_cleared = FALSE;
      //printf("%sSPE RECOVERING FROM PANIQ FAILLURE : ENTERING W24 STATE%s\n",OK,DEF);
		}
	} 
 ///////////////////////////////////////////////////   
  state clearance_faillures {
		option -e;
		option -x;
		entry {
      printf("SPE CLEARANCE FAILURE CONDITION: ");
      SPE_failed_rst = FALSE;
      SPE_not_cleared = FALSE;
      SPE_OLD_FAIL_COND = SPE_FAIL_COND;
      SPE_update_failed(SPE_FAIL_COND == FAIL ? STOK : SPE_FAIL_COND); // we cannot index -1(FAIL)
		}
   
		when () { // seq excute faster than recor logi
		} state recover_from_faillure	   
	} 
//////////////////////////////////////////////////////////
	state recover_from_faillure {
		
		when (SPE_FAIL_COND ==  STOK) {
      printf("%sSPE RECOVERING FROM CLEARANCE  FAILLURE : ENTERING W24 STATE%s\n",OK,DEF);
		} state  watchman_24_pressed
			
		when (SPE_FAIL_COND != SPE_OLD_FAIL_COND) {
           
		} state  clearance_faillures
	}   
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
  SPE_OLD_FAIL_COND = SPE_FAIL_COND;
  SPE_RST_OUTS  = TRUE;
	not_cleared(SPE_CLR_STATS);
	report_error(SPE_INTLCK_STATS, 0);
  pvPut(SPE_RST_OUTS, SYNC);
	pvPut(SPE_CLR_STATS, SYNC);
	pvPut(SPE_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void resetVault(){
	not_cleared(SPE_CLR_STATS);
	pvPut(SPE_CLR_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SPE_update_failed(short report)
{
	clear_failed(SPE_CLR_STATS);
	pvPut(SPE_CLR_STATS, SYNC);
	report_error(SPE_INTLCK_STATS, report);
	pvPut(SPE_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,SPE_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void SPE_update_report(short intlck) {
	report_error(SPE_INTLCK_STATS, intlck);
	pvPut(SPE_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SPE_status()
{
	cleared(SPE_CLR_STATS);
	pvPut(SPE_CLR_STATS, SYNC); 		
	report_error(SPE_INTLCK_STATS, 0);
	pvPut(SPE_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void SPE_clear_underway()
{  
	clear_underway(SPE_CLR_STATS);
	pvPut(SPE_CLR_STATS, SYNC); 		
}

//////////////////////////////////////////////////////////////////////////
%{

inline void cleared(string vault_status) {   
    strcpy(vault_status, mes_array[1]); // Area cleared  
}
////////////////////////////////////////////////
inline void not_cleared(string vault_status) {  
   strcpy(vault_status, mes_array[2]); // Area not cleared    
}
///////////////////////////////////////////////
inline void clear_underway(string vault_status) { 
   strcpy(vault_status, mes_array[3]);  // Area clearance underway    
}
//////////////////////////////////////////////
inline void clear_failed(string vault_status) { 
   strcpy(vault_status, mes_array[5]); // Area clearance fail   
}
////////////////////////////////////////////////
inline void report_error(string vault_interlock, short intlock)
{
   strcpy(vault_interlock, mes_array[intlock]);
}
	
}%