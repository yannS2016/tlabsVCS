program sscgfa1ClearanceSNC

%{
#include "vcs_var_mes.h" // define this here so C functions are seen
	
#define	STOK        0
#define FAIL		-1
#define	G3OFF		66
#define WFVC		193
#define B11ON		65
#define B12OFF		68
#define SSCA1PNK	69 
}%
/* Declare seq variables*/
short SSCA1_VC;   
short SSCA1_W11_STS;
short SSCA1_W12_STS;
short SSCA1_RST_OUTS;
short SSCA1_FAIL_COND;
short SSCA1_PNK;
string SSCA1_CLR_STATS; 
string SSCA1_INTLCK_STATS;

// CONTROL FLAGS
short SSCA1_OLD_FAIL_COND;
short SSCA1_FAILED_RST = FALSE;

/* Associate SNL variables with epics output pv's*/
assign	SSCA1_RST_OUTS		to	"{SYS}:RST-SSCA1.PROC"; 
assign	SSCA1_CLR_STATS	    to	"{SYS}:SSCA1-CLR-STATS"; 
assign	SSCA1_INTLCK_STATS  to	"{SYS}:SSCA1-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	SSCA1_VC 			to 	"{SYS}:SSCA1-VC"; 
assign 	SSCA1_W11_STS 		to  "{SYS}:SSC-W11-STS";   
assign 	SSCA1_W12_STS 		to  "{SYS}:SSC-W12-STS";
assign	SSCA1_FAIL_COND	    to	"{SYS}:SSCA1-FAIL-COND";
assign	SSCA1_PNK			to	"{SYS}:SSCA1-PNK";

// monitor changes
monitor	SSCA1_VC;
monitor SSCA1_W11_STS;   
monitor SSCA1_W12_STS;
monitor	SSCA1_FAIL_COND;
monitor	SSCA1_PNK;

ss SSCA1_clearance_status {
    state init {
		  when (delay(1)) {
			  initVault();
			  printf("\n%sSSC GROUND FLOOR AREA 1 INITIALISATION COMPLETED%s\n",OK,DEF);
		  } state watchman_11_pressed	
    }
//////////////////////////////////////////////////////////

	state watchman_11_pressed {

		when (SSCA1_FAIL_COND != STOK) {
			SSCA1_OLD_FAIL_COND = SSCA1_FAIL_COND;
		} state  clearance_faillures
        
		/*when (SSCA1_W11_STS == WFVC) {

		} state  clearance_pending */      
			
		when (SSCA1_W11_STS == B11ON) {
			SSCA1_clear_underway();
			SSCA1_update_report(B11ON);
		} state watchman_11_released
	}
//////////////////////////////////////////////////////////
/*	state clearance_pending {
    option -e;
		option -x;
   
		entry {
            resetVault();
            SSCA1_update_report(WFVC);
		}
   
		when (SSCA1_W11_STS != WFVC) {

		} state watchman_11_pressed  		

	}*/
//////////////////////////////////////////////////////////
	state watchman_11_released {
		
		when (SSCA1_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (SSCA1_W11_STS != B11ON) {
			
		} state gate_g3_closed
	}
//////////////////////////////////////////////////////////
	state gate_g3_closed {
 
		option -e;

		entry {
		  SSCA1_update_report(G3OFF);
		}  
		
		when (SSCA1_FAIL_COND != STOK) {

		} state  clearance_faillures
        

		when (SSCA1_W12_STS != G3OFF) {			

		} state  watchman_12_pressed
	}
///////////////////////////////////////////////////////////
	state watchman_12_pressed {

		option -e;
		entry {
			SSCA1_update_report(B12OFF);
		}
    		
		when (SSCA1_FAIL_COND != STOK) {

		} state  clearance_faillures
			
		when (SSCA1_W12_STS == STOK) {

			SSCA1_status();
		} state vault_cleared
   
		when (SSCA1_W12_STS != B12OFF) {
            
		} state gate_g3_closed
	} 
///////////////////////////////////////////////////////////////
  state vault_cleared {
		option -e;
		entry {
			printf("%sSSC Ground Floor Area 1 IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (SSCA1_VC != STOK) {

		} state paniq_faillure
	}
///////////////////////////////////////////////////   
  state paniq_faillure {

		when (SSCA1_VC != SSCA1PNK) {

		} state clearance_faillures	
 
 		when () { // paniq button released?
            printf("SSC Ground Floor Area 1 CLEARED FAILURE CONDITION: ");
            SSCA1_update_failed(SSCA1PNK); 

		} state recover_from_paniq	     
	}
////////////////////////////////////////////////////////////    
   	state recover_from_paniq {
		option -e;
		option -x;
		when (!SSCA1_PNK) { // paniq button released?
        // we only go to this state so we enter watchman_147_pressed from one point(recover_from_faillure)
		} state recover_from_faillure  

		exit {
            SSCA1_FAILED_RST = FALSE;
		}
	}
//////////////////////////////////////////////////////////////////
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
		    printf("SSC Ground Floor Area 1 CLEARANCE FAILURE CONDITION: ");
			SSCA1_FAILED_RST = FALSE;
			SSCA1_OLD_FAIL_COND = SSCA1_FAIL_COND;
            SSCA1_update_failed(SSCA1_FAIL_COND == FAIL ? STOK : SSCA1_FAIL_COND); // we cannot index -1(FAIL)
		}
   
		when () {
		
		} state recover_from_faillure  	
	}
//////////////////////////////////////////////////////////
	state recover_from_faillure {
  
		when (!SSCA1_FAIL_COND) {
            printf("%sSSC GROUND-FLOOR RECOVERING FROM FAILLURE : ENTERING W11 STATE%s\n",OK,DEF);
		} state  watchman_11_pressed
   
		when (SSCA1_FAIL_COND != SSCA1_OLD_FAIL_COND) {

		} state  clearance_faillures
	} 
}
//////////////////////////////////////////////////////////////////////
void initVault(){
	//SSCA1_INIT = TRUE;
    SSCA1_RST_OUTS  = TRUE;
    SSCA1_OLD_FAIL_COND = SSCA1_FAIL_COND;
	not_cleared(SSCA1_CLR_STATS);
	report_error(SSCA1_INTLCK_STATS, 0);
    pvPut(SSCA1_RST_OUTS, SYNC);
	//pvPut(SSCA1_INIT, SYNC);
	pvPut(SSCA1_CLR_STATS, SYNC);
	pvPut(SSCA1_INTLCK_STATS, SYNC);
}

////////////////////////////////////////////////////////////////////////
void resetVault(){
	not_cleared(SSCA1_CLR_STATS);
	pvPut(SSCA1_CLR_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SSCA1_update_failed(short report)
{
	clear_failed(SSCA1_CLR_STATS);
	pvPut(SSCA1_CLR_STATS, SYNC);
	report_error(SSCA1_INTLCK_STATS, report);
	pvPut(SSCA1_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,SSCA1_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void SSCA1_update_report(short intlck) {
	report_error(SSCA1_INTLCK_STATS, intlck);
	pvPut(SSCA1_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SSCA1_status()
{  
	cleared(SSCA1_CLR_STATS);
	pvPut(SSCA1_CLR_STATS, SYNC); 		
	report_error(SSCA1_INTLCK_STATS, 0);
	pvPut(SSCA1_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void SSCA1_clear_underway()
{  
	clear_underway(SSCA1_CLR_STATS);
	pvPut(SSCA1_CLR_STATS, SYNC); 		
}
/**********************************************************/
