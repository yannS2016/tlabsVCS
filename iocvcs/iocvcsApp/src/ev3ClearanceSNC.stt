program ev3ClearanceSNC

%{
/*******************************************************************/
#include "vcs_var_mes.h" // define this here so C functions are seen
/*******************************************************************/
#define	VCOK       	0
#define FAIL		-1
#define	B23OFF      116
#define	B22ON      	113
#define DA8S1OFF	114 
#define DA8S2OFF	115
}%
/* Declare seq variables*/
short EV3_INIT; 
short EV3_VC;   
short EV3_W22_STS;
short EV3_W23_STS;
short EV3_FAIL_COND;
string EV3_CLR_STATS; 
string EV3_INTLCK_STATS;
// CONTROL FLAGS
short EV3Update;
short EV3_OLD_FAIL_COND;

/* Associate SNL variables with epics output pv's*/
assign	EV3_CLR_STATS		to	"{SYS}:EV3-CLR-STATS"; 
assign	EV3_INTLCK_STATS	to	"{SYS}:EV3-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	EV3_VC 				to 	"{SYS}:EV3-VC"; 
assign 	EV3_INIT 			to 	"{SYS}:EV3-INIT";
assign 	EV3_W22_STS 		to 	"{SYS}:EV3-W22-STS";   
assign 	EV3_W23_STS 		to 	"{SYS}:EV3-W23-STS";
assign	EV3_FAIL_COND		to	"{SYS}:EV3-FAIL-COND";

monitor	EV3_VC;
monitor EV3_W22_STS;  
monitor EV3_W23_STS;
monitor	EV3_FAIL_COND;

ss EV3_clearance_status {
    state init {
		when (delay(6)) {
			initVault();
			printf("%sEXPERIMENTAL VAULT 3 INITIALISATION COMPLETED%s\n",OK,DEF);
		} state watchman_22_pressed	
    }
///////////////////////////////////////////////////////////////
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("%sEXPERIMENTAL VAULT 3 IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (EV3_VC != VCOK) {

		} state vc_faillures
	}
//////////////////////////////////////////////////////////
	state recover_faillure {
		
		when (!EV3_FAIL_COND) {
			if(!EV3Update) {
				printf("%sRECOVERING FROM FAILLURE - ENTERING W22 STATE%s\n",OK,DEF);
				EV3Update = TRUE;
			}
		} state  watchman_22_pressed
			
		when (EV3_FAIL_COND != EV3_OLD_FAIL_COND) {
		} state  clearance_faillures
	}
//////////////////////////////////////////////////////////
	state watchman_22_pressed {

		when (EV3_FAIL_COND != VCOK) {
			EV3_OLD_FAIL_COND = EV3_FAIL_COND;
		} state  clearance_faillures
			
		when (EV3_W22_STS == B22ON) {
			EV3_clear_underway();
			EV3_update_report(B22ON);
		} state watchman_22_released
	}
//////////////////////////////////////////////////////////
	state watchman_22_released {
		
		when (EV3_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
		when (EV3_W22_STS != B22ON) {
		} state door_a8_closed
	}
//////////////////////////////////////////////////////////
	state door_a8_closed {

		when (EV3_FAIL_COND != VCOK) {

		} state   clearance_faillures
		
		when (EV3_W23_STS == DA8S1OFF) {
			EV3_update_report(DA8S1OFF);
		} state door_a8_closed

		when (EV3_W23_STS == DA8S2OFF) {
			EV3_update_report(DA8S2OFF);
		} state door_a8_closed


		when () {
			EV3_update_report(B23OFF);
		} state watchman_23_pressed
	}

///////////////////////////////////////////////////////////
	state watchman_23_pressed {
		
		when (EV3_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
			
		when (!EV3_W23_STS) {

			EV3_status();
		} state vault_cleared
	}
///////////////////////////////////////////////////////////
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("EV3 CLEARANCE FAILURE CONDITION: ");
			EV3Update = FALSE;
		}

		when () {
			EV3_update_failed(EV3_FAIL_COND);
		} state recover_faillure
		
		exit {
		    EV3_OLD_FAIL_COND = EV3_FAIL_COND;	
		}			
	}
////////////////////////////////////////////////////////////////////////////
	state vc_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("EV3 CLEAR FAILURE CONDITION: ");
			EV3Update = FALSE;
		}
		
		when () {			
			EV3_update_failed(EV3_VC);
		} state recover_faillure
		
		exit {
		    EV3_OLD_FAIL_COND = EV3_FAIL_COND;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
	EV3_INIT = TRUE;
	EV3_OLD_FAIL_COND = EV3_FAIL_COND;
	not_cleared(EV3_CLR_STATS);
	report_error(EV3_INTLCK_STATS, 0);
	pvPut(EV3_INIT, SYNC);
	pvPut(EV3_CLR_STATS, SYNC);
	pvPut(EV3_INTLCK_STATS, SYNC);
}

void resetStatus()
{
	not_cleared(EV3_CLR_STATS);
	report_error(EV3_INTLCK_STATS, 0);
	pvPut(EV3_CLR_STATS, SYNC);
	pvPut(EV3_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void EV3_update_failed(short report)
{
	clear_failed(EV3_CLR_STATS);
	pvPut(EV3_CLR_STATS, SYNC);
	report_error(EV3_INTLCK_STATS, report);
	pvPut(EV3_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,EV3_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void EV3_update_report(short intlck) {
	report_error(EV3_INTLCK_STATS, intlck);
	pvPut(EV3_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void EV3_status()
{
	cleared(EV3_CLR_STATS);
	pvPut(EV3_CLR_STATS, SYNC); 		
	report_error(EV3_INTLCK_STATS, 0);
	pvPut(EV3_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void EV3_clear_underway()
{  
	clear_underway(EV3_CLR_STATS);
	pvPut(EV3_CLR_STATS, SYNC); 		
}
