program ev2ClearanceSNC

%{
/*******************************************************************/
#include "vcs_var_mes.h" // define this here so C functions are seen
/*******************************************************************/
#define	VCOK       	0
#define FAIL		-1
#define	B21OFF      110
#define	B20ON      	107
#define DA7S1OFF	108 
#define DA7S2OFF	109
}%
/* Declare seq variables*/
short EV2_INIT; 
short EV2_VC;   
short EV2_W20_STS;
short EV2_W21_STS;
short EV2_FAIL_COND;
string EV2_CLR_STATS; 
string EV2_INTLCK_STATS;
// CONTROL FLAGS
short EV2Update;
short EV2_OLD_FAIL_COND;

/* Associate SNL variables with epics output pv's*/
assign	EV2_CLR_STATS		to	"{SYS}:EV2-CLR-STATS"; 
assign	EV2_INTLCK_STATS	to	"{SYS}:EV2-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	EV2_VC 				to 	"{SYS}:EV2-VC"; 
assign 	EV2_INIT 			to 	"{SYS}:EV2-INIT";
assign 	EV2_W20_STS 		to 	"{SYS}:EV2-W20-STS";   
assign 	EV2_W21_STS 		to 	"{SYS}:EV2-W21-STS";
assign	EV2_FAIL_COND		to	"{SYS}:EV2-FAIL-COND";

monitor	EV2_VC;
monitor EV2_W20_STS;  
monitor EV2_W21_STS;
monitor	EV2_FAIL_COND;

ss EV2_clearance_status {
    state init {
		when (delay(5.5)) {
			initVault();
			printf("%sEXPERIMENTAL VAULT 2 INITIALISATION COMPLETED%s\n",OK,DEF);
		} state watchman_20_pressed	
    }
///////////////////////////////////////////////////////////////
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("%sEXPERIMENTAL VAULT 2 IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (EV2_VC != VCOK) {

		} state vc_faillures
	}
//////////////////////////////////////////////////////////
	state recover_faillure {
		
		when (!EV2_FAIL_COND) {
			if(!EV2Update) {
				printf("%sRECOVERING FROM FAILLURE - ENTERING W20 STATE%s\n",OK,DEF);
				EV2Update = TRUE;
			}
		} state  watchman_20_pressed
			
		when (EV2_FAIL_COND != EV2_OLD_FAIL_COND) {
		} state  clearance_faillures
	}
//////////////////////////////////////////////////////////
	state watchman_20_pressed {

		when (EV2_FAIL_COND != VCOK) {
			EV2_OLD_FAIL_COND = EV2_FAIL_COND;
		} state  clearance_faillures
			
		when (EV2_W20_STS == B20ON) {
			EV2_clear_underway();
			EV2_update_report(B20ON);
		} state watchman_20_released
	}
//////////////////////////////////////////////////////////
	state watchman_20_released {
		
		when (EV2_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
		when (EV2_W20_STS != B20ON) {
		} state door_a7_closed
	}
//////////////////////////////////////////////////////////
	state door_a7_closed {

		when (EV2_FAIL_COND != VCOK) {

		} state   clearance_faillures
		
		when (EV2_W21_STS == DA7S1OFF) {
			EV2_update_report(DA7S1OFF);
		} state door_a7_closed

		when (EV2_W21_STS == DA7S2OFF) {
			EV2_update_report(DA7S2OFF);
		} state door_a7_closed


		when () {
			EV2_update_report(B21OFF);
		} state watchman_21_pressed
	}

///////////////////////////////////////////////////////////
	state watchman_21_pressed {
		
		when (EV2_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
			
		when (!EV2_W21_STS) {

			EV2_status();
		} state vault_cleared
	}
///////////////////////////////////////////////////////////
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("EV2 CLEARANCE FAILURE CONDITION: ");
			EV2Update = FALSE;
		}

		when () {
			EV2_update_failed(EV2_FAIL_COND);
		} state recover_faillure
		
		exit {
		    EV2_OLD_FAIL_COND = EV2_FAIL_COND;	
		}			
	}
////////////////////////////////////////////////////////////////////////////
	state vc_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("EV2 CLEAR FAILURE CONDITION: ");
			EV2Update = FALSE;
		}
		
		when () {			
			EV2_update_failed(EV2_VC);
		} state recover_faillure
		
		exit {
		    EV2_OLD_FAIL_COND = EV2_FAIL_COND;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
	EV2_INIT = TRUE;
	EV2_OLD_FAIL_COND = EV2_FAIL_COND;
	not_cleared(EV2_CLR_STATS);
	report_error(EV2_INTLCK_STATS, 54);
	pvPut(EV2_INIT, SYNC);
	pvPut(EV2_CLR_STATS, SYNC);
	pvPut(EV2_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void EV2_update_failed(short report)
{
	clear_failed(EV2_CLR_STATS);
	pvPut(EV2_CLR_STATS, SYNC);
	report_error(EV2_INTLCK_STATS, report);
	pvPut(EV2_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,EV2_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void EV2_update_report(short intlck) {
	report_error(EV2_INTLCK_STATS, intlck);
	pvPut(EV2_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void EV2_status()
{
	cleared(EV2_CLR_STATS);
	pvPut(EV2_CLR_STATS, SYNC); 		
	report_error(EV2_INTLCK_STATS, 54);
	pvPut(EV2_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void EV2_clear_underway()
{  
	clear_underway(EV2_CLR_STATS);
	pvPut(EV2_CLR_STATS, SYNC); 		
}
