program sscgfa2ClearanceSNC

%{
/*******************************************************************/
#include "vcs_var_mes.h" // define this here so C functions are seen
/*******************************************************************/
#define	VCOK       	0
#define FAIL		-1
#define B13ON 		49	      
#define B14OFF		50          
#define B14ON		52 		
#define B15OFF		55 
#define DA1ON 		40	        
#define DA1S1OFF	53	             
#define DA1S2OFF	53	

}%
/* Declare seq variables*/
short SSCA2_INIT; 
short SSCA2_VC;   
short SSC_W13_STS;
short SSC_W14_STS;
short SSC_W15_STS;
short SSCA2_FAIL_COND;
string SSCA2_CLR_STATS; 
string SSCA2_INTLCK_STATS;
// CONTROL FLAGS
short SSCA2Update;
short SSCA2_OLD_FAIL_COND;

/* Associate SNL variables with epics output pv's*/
assign	SSCA2_CLR_STATS		to	"{SYS}:SSCA2-CLR-STATS"; 
assign	SSCA2_INTLCK_STATS	to	"{SYS}:SSCA2-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	SSCA2_VC 			to 	"{SYS}:SSCA2-VC"; 
assign 	SSCA2_INIT 			to 	"{SYS}:SSCA2-INIT";
assign 	SSC_W13_STS 		to 	"{SYS}:SSC-W13-STS";   
assign 	SSC_W14_STS 		to 	"{SYS}:SSC-W14-STS";
assign 	SSC_W15_STS 		to 	"{SYS}:SSC-W15-STS";
assign	SSCA2_FAIL_COND		to	"{SYS}:SSCA2-FAIL-COND";

monitor	SSCA2_VC;
monitor SSC_W13_STS;  
monitor SSC_W14_STS;
monitor SSC_W15_STS;
monitor	SSCA2_FAIL_COND;

ss SSCA2_clearance_status {
    state init {
		when (delay(3.5)) {
			initVault();
			printf("%sSSC GROUND FLOOR AREA 2 INITIALISATION COMPLETED%s\n",OK,DEF);
		} state watchman_13_pressed	
    }
///////////////////////////////////////////////////////////////
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("%sSSC GROUND FLOOR AREA 2 IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (SSCA2_VC != VCOK) {

		} state vc_faillures
	}
//////////////////////////////////////////////////////////
	state recover_faillure {
		
		when (!SSCA2_FAIL_COND) {
			if(!SSCA2Update) {
				printf("%sRECOVERING FROM FAILLURE - ENTERING W13 STATE%s\n",OK,DEF);
				SSCA2Update = TRUE;
			}
		} state  watchman_13_pressed
			
		when (SSCA2_FAIL_COND != SSCA2_OLD_FAIL_COND) {
		} state  clearance_faillures
	}
//////////////////////////////////////////////////////////

	state watchman_13_pressed {

		when (SSCA2_FAIL_COND != VCOK) {
			SSCA2_OLD_FAIL_COND = SSCA2_FAIL_COND;
		} state  clearance_faillures
			
		when (SSC_W13_STS == B13ON) {
			SSCA2_clear_underway();
			SSCA2_update_report(B13ON);
		} state watchman_13_released
	}
//////////////////////////////////////////////////////////
	state watchman_13_released {
		
		when (SSCA2_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
		when (SSC_W13_STS != B13ON) {
			SSCA2_update_report(B14OFF);		
		} state watchman_14_pressed
	}
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
	state watchman_14_pressed {

		when (SSCA2_FAIL_COND != VCOK) {

		} state   clearance_faillures
		
		
		when (SSC_W14_STS == B14ON) {
			SSCA2_update_report(B14ON);
		} state watchman_14_released
	}
//////////////////////////////////////////////////////////
	state watchman_14_released {
		
		when (SSCA2_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
		when (SSC_W14_STS != B14ON) {

		} state door_a1_closed
		
	}
//////////////////////////////////////////////////////////
	state door_a1_closed {
		
		when (SSCA2_FAIL_COND != VCOK) {

		} state  clearance_faillures
		
		when (SSC_W15_STS == DA1S1OFF) {			
			SSCA2_update_report(DA1S1OFF);
		} state door_a1_closed

		when (SSC_W15_STS == DA1S2OFF) {			
			SSCA2_update_report(DA1S2OFF);
		} state door_a1_closed
			
		when () {
			SSCA2_update_report(B15OFF);
		} state watchman_15_pressed
	}
///////////////////////////////////////////////////////////
	state watchman_15_pressed {
		
		when (SSCA2_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
			
		when (!SSC_W15_STS) {

			SSCA2_status();
		} state vault_cleared
	}
///////////////////////////////////////////////////////////
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("SSC GF A2 CLEARANCE FAILURE CONDITION: ");
			SSCA2Update = FALSE;
		}

		when () {
			SSCA2_update_failed(SSCA2_FAIL_COND);
		} state recover_faillure
		
		exit {
		    SSCA2_OLD_FAIL_COND = SSCA2_FAIL_COND;	
		}			
	}
////////////////////////////////////////////////////////////////////////////
	state vc_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("SSC GF A2 CLEAR FAILURE CONDITION: ");
			SSCA2Update = FALSE;
		}
		
		when () {			
			SSCA2_update_failed(SSCA2_VC);
		} state recover_faillure
		
		exit {
		    SSCA2_OLD_FAIL_COND = SSCA2_FAIL_COND;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
	SSCA2_INIT = TRUE;
	SSCA2_OLD_FAIL_COND = SSCA2_FAIL_COND;
	not_cleared(SSCA2_CLR_STATS);
	report_error(SSCA2_INTLCK_STATS, 54);
	pvPut(SSCA2_INIT, SYNC);
	pvPut(SSCA2_CLR_STATS, SYNC);
	pvPut(SSCA2_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SSCA2_update_failed(short report)
{
	clear_failed(SSCA2_CLR_STATS);
	pvPut(SSCA2_CLR_STATS, SYNC);
	report_error(SSCA2_INTLCK_STATS, report);
	pvPut(SSCA2_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,SSCA2_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void SSCA2_update_report(short intlck) {
	report_error(SSCA2_INTLCK_STATS, intlck);
	pvPut(SSCA2_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SSCA2_status()
{
	cleared(SSCA2_CLR_STATS);
	pvPut(SSCA2_CLR_STATS, SYNC); 		
	report_error(SSCA2_INTLCK_STATS, 54);
	pvPut(SSCA2_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void SSCA2_clear_underway()
{  
	clear_underway(SSCA2_CLR_STATS);
	pvPut(SSCA2_CLR_STATS, SYNC); 		
}
