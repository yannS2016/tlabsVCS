program sscbasClearanceSNC

%{
#include "vcs_var_mes.h" // define this here so C functions are seen
	
#define	VCOK       	0
#define TOUT		5
#define FAIL		-1
#define	A001AON     15  
#define	DA001ON	    16	
#define	DA001S1ON	22	
#define	DA001S2ON	23	
#define SSCLPNK     19 
#define	G1ON        17
#define	G1S1ON      24  	
#define	G1S2ON      25 
#define	G2ON       	18
#define	G2OFF       32
#define B1ON        37
#define W1ON        20
#define B2OFF       21
#define B2ON  		35
#define B3OFF		26  
#define B3ON 		36 
#define B4OFF		27  
#define B4ON 		31 
#define W4ON		29  
#define B5OFF		28  
#define B5ON 		33
#define B6OFF		34
}%
/* Declare seq variables*/
short SSCL_INIT; 
short SSCL_VC;   
short SSC_W1_STS;
short SSC_W2_STS;
short SSC_W3_STS;
short SSC_W4_STS;
short SSC_W5_STS;
short SSC_W6_STS;
short SSC_FAIL_COND;
short SSC_OLD_FAIL_COND;
string SSCL_CLR_STATS; 
string SSCL_INTLCK_STATS;
short released = FALSE;
/* Associate SNL variables with epics output pv's*/
assign	SSCL_CLR_STATS		to	"{SYS}:SSCL-CLR-STATS"; 
assign	SSCL_INTLCK_STATS	to	"{SYS}:SSCL-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	SSCL_VC 			to 	"{SYS}:SSCL-VC"; 
assign 	SSCL_INIT 			to 	"{SYS}:SSCL-INIT";

assign 	SSC_W1_STS 			to 	"{SYS}:SSC-W1-STS"; 
assign 	SSC_W2_STS 			to  "{SYS}:SSC-W2-STS";   
assign 	SSC_W3_STS 			to 	"{SYS}:SSC-W3-STS";
assign 	SSC_W4_STS 			to 	"{SYS}:SSC-W4-STS";
assign	SSC_W5_STS			to	"{SYS}:SSC-W5-STS";
assign	SSC_W6_STS			to	"{SYS}:SSC-W6-STS";
assign	SSC_FAIL_COND		to	"{SYS}:SSCL-FAIL-COND";

monitor	SSCL_VC;
monitor SSC_W1_STS; 
monitor SSC_W2_STS;   
monitor SSC_W3_STS;
monitor SSC_W4_STS;
monitor	SSC_W5_STS;
monitor	SSC_W6_STS;
monitor	SSC_FAIL_COND;

ss SSCL_clearance_status {
    state init {
		when (delay(4)) {
			initVault();
			printf("\n%sSSC LOW INITIALISATION COMPLETED%s\n",OK,DEF);
		} state watchman_1_pressed	
    }
///////////////////////////////////////////////////////////////
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("%sSSC LOW IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (SSCL_VC != VCOK) {

		} state vc_faillures
	}
//////////////////////////////////////////////////////////
	state recover_faillure {

		when (!SSC_FAIL_COND) {
			if(!released) {
				printf("%sRECOVERING FROM FAILLURE: ENTERING W1 STATE%s\n",OK,DEF);
				released = TRUE;
			}
		} state  watchman_1_pressed
		
		when (SSC_FAIL_COND != SSC_OLD_FAIL_COND) {

		} state  clearance_faillures
	}
//////////////////////////////////////////////////////////

	state watchman_1_pressed {

		when (SSC_W1_STS == FAIL) {
			SSC_OLD_FAIL_COND = SSC_FAIL_COND;
		} state  clearance_faillures
			
		when (!SSC_W1_STS) {
			SSCL_update_report(B2OFF);
			SSCL_clear_underway();
		} state watchman_2_pressed
	}
//////////////////////////////////////////////////////////
	state watchman_2_pressed {

		when (SSC_W1_STS == FAIL) {

		} state   clearance_faillures
		
		
		when (SSC_W2_STS == B2ON) {
			SSCL_update_report(B2ON);
			printf("%sLAST VALUE %d%s\n",OK,SSC_W2_STS,DEF);
		} state watchman_2_released
	}
//////////////////////////////////////////////////////////
	state watchman_2_released {
		
		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
		
		when (SSC_W2_STS == B3OFF) {
			SSCL_update_report(B3OFF);
			printf("%sLAST VALUE %d%s\n",OK,SSC_W2_STS,DEF);
		} state watchman_3_pressed
	}
///////////////////////////////////////////////////////////
	state watchman_3_pressed {
		
		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
		

		when (SSC_W3_STS == B3ON) {
			SSCL_update_report(B3ON);
		} state watchman_3_released
	}
////////////////////////////////////////////////////////////
	state watchman_3_released {

		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
			
	
		when (SSC_W3_STS == B4OFF) {
			SSCL_update_report(B4OFF);
		} state watchman_4_pressed
	}	
////////////////////////////////////////////////////////////
	state watchman_4_pressed {

		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
		
		
		when (!SSC_W4_STS) {
			
			SSCL_update_report(B1ON);
		} state  watchman_1_released
	}	
/////////////////////////////////////////////////////////////
	state watchman_1_released {

		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
		
		when (SSC_W1_STS == B1ON) {
			
			SSCL_update_report(B5OFF);
		} state watchman_5_pressed			
	}
/////////////////////////////////////////////////////////////
	state watchman_5_pressed {
		
		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
		

		when (!SSC_W5_STS) {
			
			SSCL_update_report(30);
		} state watchman_4_released	
	}
////////////////////////////////////////////////////////////////
	state watchman_5_released {	
	
		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
		
		when (SSC_W5_STS != B5ON) {		// B5 STLL PRESSED - B4 RELEASED: BLOCK HERE

		} state watchman_4_released
	}
/////////////////////////////////////////////////////////////////
	state watchman_4_released {	

		
		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
			

		when (!SSC_W5_STS) { 			// B4 AND B5 STLL PRESSED: BLOCK HERE
		
		} state watchman_4_released
		
		when (SSC_W5_STS == B5ON) { 	// B4 RELEASED - B5 PRESSED :  B5 MUST BE RELEASED
			SSCL_update_report(B5ON);
		} state watchman_5_released
		
		
		when (SSC_W5_STS == B4ON) { 	// B4 STLL PRESSED - B5 RELEASED: BLOCK HERE
			SSCL_update_report(B4ON);
		} state watchman_4_released

		
		when () { 						// OTHERWISE B4 AND B5 ARE RELEASED B6 MUST BE ACTVATED

		} state watchman_6_pressed
	}
//////////////////////////////////////////////////////////////////////
	state watchman_6_pressed {

		when (SSC_W1_STS == FAIL) {

		} state  clearance_faillures
			
			
		when (SSC_W6_STS == G2OFF) {
			
			SSCL_update_report(G2OFF);
		} state watchman_6_pressed
			
		
		when (SSC_W6_STS == B6OFF) {
			SSCL_update_report(B6OFF);
		} state watchman_6_pressed
			
		
		when (!SSC_W6_STS) {
			
			SSCL_status();
		} state vault_cleared
	}
//////////////////////////////////////////////////////////////////
	
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		option -e;
		entry {
			printf("SSC LOW CLEARANCE FAILURE CONDITION: ");
			released = FALSE;
			SSC_OLD_FAIL_COND = SSC_FAIL_COND;
		}

		when (SSC_FAIL_COND == A001AON) {
			
			SSCL_update_failed(A001AON);
			printf("%sSSC CABLE LABYRINTH NOT CLEARED%s\n",ERROR,DEF);
		} state recover_faillure


		when (SSC_FAIL_COND == DA001S1ON) {
			
			SSCL_update_failed(DA001S1ON);
			printf("%sDOOR A001 SWITCH 1 IS OPEN%s\n",ERROR,DEF);
		} state recover_faillure
			
		when (SSC_FAIL_COND == DA001S2ON) {
			
			SSCL_update_failed(DA001S2ON);
			printf("%sDOOR A001 SWITCH 2 IS OPEN%s\n",ERROR,DEF);
		} state recover_faillure
		
			
		when (SSC_FAIL_COND == G1S1ON) {
			
			SSCL_update_failed(G1S1ON);
			printf("%sGATE G1 SWITCH 1 IS OPEN%s\n",ERROR,DEF);
		} state recover_faillure

			
		when (SSC_FAIL_COND == G1S2ON) {
			SSCL_update_failed(G1S2ON);
			printf("%sGATE G1 SWITCH 2 IS OPEN%s\n",ERROR,DEF);
		} state recover_faillure	

		when (SSC_FAIL_COND == TOUT) {
			
			SSCL_update_failed(TOUT);
			printf("%sTIME OUT ERROR: RELEASE ALL WATCHMEN%s\n",ERROR,DEF);
		} state recover_faillure
			
		when (SSC_FAIL_COND == W1ON) {
			
			SSCL_update_failed(W1ON);
			printf("%sWATCHMAN 1 WAS RELEASED TOO SOON%s\n",ERROR,DEF);
		} state recover_faillure

		when (SSC_FAIL_COND == W4ON) {
			
			SSCL_update_failed(W4ON);
			printf("%sWATCHMAN 4 WAS RELEASED TOO SOON%s\n",ERROR,DEF);
		} state recover_faillure
	}
////////////////////////////////////////////////////////////////////////////
	state vc_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		entry {
			printf("SSC LOW CLEAR FAILURE CONDITION: ");
			released = FALSE;
		}

		when (SSCL_VC == A001AON) {
			
			SSCL_update_failed(A001AON);
			printf("%sSSC CABLE LABYRINTH NOT CLEARED%s\n",ERROR,DEF);
		} state recover_faillure
		
		when (SSCL_VC == G1ON) {
			
			SSCL_update_failed(G1ON);
			printf("%sGATE G1 WAS OPENED%s\n",ERROR,DEF);
		} state recover_faillure
		
		when (SSCL_VC == G2ON) {
			
			SSCL_update_failed(G2ON);
			printf("%sGATE G2 WAS OPENED%s\n",ERROR,DEF);
		} state recover_faillure
		
		when (SSCL_VC == DA001ON) {
			
			SSCL_update_failed(DA001ON);
			printf("%sDOOR A001 WAS OPENED%s\n",ERROR,DEF);
		} state recover_faillure

		when (SSCL_VC == SSCLPNK) {
			
			SSCL_update_failed(SSCLPNK);
			printf("%sPANIC BUTTON WAS  PRESSED%s\n",ERROR,DEF);
		} state recover_faillure
	}
}

void initVault(){
	SSCL_INIT = FALSE;
	not_cleared(SSCL_CLR_STATS);
	report_error(SSCL_INTLCK_STATS, 54);
	pvPut(SSCL_INIT, SYNC);
	pvPut(SSCL_CLR_STATS, SYNC);
	pvPut(SSCL_INTLCK_STATS, SYNC);
}

void resetStatus()
{
	not_cleared(SSCL_CLR_STATS);
	report_error(SSCL_INTLCK_STATS, 54);
	pvPut(SSCL_CLR_STATS, SYNC);
	pvPut(SSCL_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SSCL_update_failed(short report)
{
	clear_failed(SSCL_CLR_STATS);
	pvPut(SSCL_CLR_STATS, SYNC);
	report_error(SSCL_INTLCK_STATS, report);
	pvPut(SSCL_INTLCK_STATS, SYNC);
}
/////////////////////////////////////////////////////////////////////////
void SSCL_update_report(short intlck) {
	report_error(SSCL_INTLCK_STATS, intlck);
	pvPut(SSCL_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void SSCL_status()
{  
	cleared(SSCL_CLR_STATS);
	pvPut(SSCL_CLR_STATS, SYNC); 		
	report_error(SSCL_INTLCK_STATS, 54);
	pvPut(SSCL_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void SSCL_clear_underway()
{  
	clear_underway(SSCL_CLR_STATS);
	pvPut(SSCL_CLR_STATS, SYNC); 		
}
/**********************************************************/

