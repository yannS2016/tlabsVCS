program vliClearanceSNC
%{
	#define	VC       	0
	#define TOUT		5
	#define VLIPNK      138
	#define	G4ON		82
	#define	G4S1ON		83
	#define	G4S2ON		84
	#define	B33ON       100
	#define	B32ON       187
	#define	B32OFF      97
	#define	DA004ON     96
	#define DA004S1ON	98 
	#define DA004S2ON	99
}%
/* Declare seq variables*/
short VLI_INIT; 
short VLI_SEL_STAGE;

short VLI_VC; 
short VLI_VNCS1;   
short VLI_VNCS2;  

string VLI_CLR_STATS; 
string VLI_INTLCK_STATS;
/* Associate SNL variables with epics output pv's*/
assign	VLI_CLR_STATS		to	"{SYS}:VLI-CLR-STATS"; 
assign	VLI_INTLCK_STATS	to	"{SYS}:VLI-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	VLI_VC 				to 	"{SYS}:VLI-VC"; 
assign 	VLI_VNCS1 			to  "{SYS}:VLI-VNCS1";   
assign 	VLI_VNCS2 			to 	"{SYS}:VLI-VNCS2";
assign 	VLI_INIT 			to 	"{SYS}:VLI-INIT";
assign	VLI_SEL_STAGE		to	"{SYS}:VLI-SEL-STAGE";

monitor	VLI_VC;
monitor	VLI_VNCS1;
monitor	VLI_VNCS2;
monitor	VLI_SEL_STAGE;

ss VLI_clearance_status {
    state init {
		when (delay(4)) {
			initVault();
			printf("VERTICAL BEAMLINE VAULT INITIALISATION COMPLETED\n");
		} state vault_nc_stage_1	
    }
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("VERTICAL BEAMLINE VAULT IN CLEARED STATE\n");
		} 

		when (VLI_VC == DA004ON) {
			VLI_update_failed(DA004ON);
			printf("Door A004 was opened\n");
		} state vault_nc_stage_1
			
			
		when (VLI_VC == G4ON) {
			VLI_update_failed(G4ON);
			printf("Gate G4 was opened\n");

		} state vault_nc_stage_1

			
		when (VLI_VC == VLIPNK) {
			VLI_update_failed(VLIPNK);
			printf("Panic button 32 was pressed\n");
		} state vault_nc_stage_1
	}
	
	/*VAULT NOT CLEARED STAGE 1*/
	state vault_nc_stage_1 {

		when (VLI_SEL_STAGE == 3) {
			VLI_clear_underway();
		} state vault_nc_stage_2
		
			
		when(VLI_VNCS1 == B32ON){
			VLI_update_report(B32ON);		
			/*printf("Waiting for Vault Clearance\n");*/
		}state vault_nc_stage_1
	}
	
	/*VAULT NOT CLEARED STAGE 2*/
	state vault_nc_stage_2 {
		
		when (VLI_SEL_STAGE == 1) {
			VLI_status();
		} state vault_cleared
			

		when (VLI_VNCS2 == B32OFF) {
			VLI_update_report(B32OFF);
			printf("Watchman 32 must be released\n");
		} state vault_nc_stage_2
			
		
		when (VLI_VNCS2 == TOUT) {
			VLI_update_failed(TOUT);
			printf("TIME OUT ERROR: RELEASE ALL WATCHMEN\n");
		} state vault_nc_stage_1
			
		
		when (VLI_VNCS2 == G4S1ON) {
			VLI_update_failed(G4S1ON);
			printf("Gate G4 switch 1 is open\n");
		} state vault_nc_stage_1
			
			
		when (VLI_VNCS2 == G4S2ON) {
			VLI_update_failed(G4S2ON);
			printf("Gate G4 switch 2 is open\n");
		} state vault_nc_stage_1
			
		
		when (VLI_VNCS2 == DA004S1ON) {
			VLI_update_report(DA004S1ON);
			printf("Door A004 switch 1 is open\n");
		} state vault_nc_stage_2
		
		
		when (VLI_VNCS2 == DA004S2ON) {
			VLI_update_report(DA004S2ON);
			printf("Door A004 switch 2 is open\n");
		} state vault_nc_stage_2
		
		
		when (VLI_VNCS2 == B33ON) {
			VLI_update_report(B33ON);
			printf("Watchman 33 must be activated\n");
		} state vault_nc_stage_2

	}	
}

void initVault(){
	VLI_INIT = TRUE;
	not_cleared(VLI_CLR_STATS);
	report_error(VLI_INTLCK_STATS, 54);
	pvPut(VLI_INIT, SYNC);
	pvPut(VLI_CLR_STATS, SYNC);
	pvPut(VLI_INTLCK_STATS, SYNC);
}

////////////////////////////////////////////////////////////////////////
void VLI_update_failed(short report)
{
	clear_failed(VLI_CLR_STATS);
	pvPut(VLI_CLR_STATS, SYNC);
	report_error(VLI_INTLCK_STATS, report);
	pvPut(VLI_INTLCK_STATS, SYNC);
}
/////////////////////////////////////////////////////////////////////////
void VLI_update_report(short intlck) {
	report_error(VLI_INTLCK_STATS, intlck);
	pvPut(VLI_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void VLI_status()
{  
	cleared(VLI_CLR_STATS);
	pvPut(VLI_CLR_STATS, SYNC); 		
	report_error(VLI_INTLCK_STATS, 54);
	pvPut(VLI_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void VLI_clear_underway()
{  
	clear_underway(VLI_CLR_STATS);
	pvPut(VLI_CLR_STATS, SYNC); 		
}
/**********************************************************/
%{
	#include "vcs_var_mes.h"
	
}%
