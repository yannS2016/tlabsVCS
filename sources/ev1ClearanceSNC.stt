program ev1ClearanceSNC

%{
/*******************************************************************/
#include "vcs_var_mes.h" // define this here so C functions are seen
/*******************************************************************/
#define	VCOK       	0
#define FAIL		-1
#define	B19OFF      105
#define	B18ON      	102
#define DA6S1OFF	103 
#define DA6S2OFF	104




}%
/* Declare seq variables*/
short EV1_INIT; 
short EV1_VC;   
short SSC_W18_STS;
short SSC_W19_STS;
short EV1_FAIL_COND;
string EV1_CLR_STATS; 
string EV1_INTLCK_STATS;
// CONTROL FLAGS
short EV1Update;
short EV1_OLD_FAIL_COND;

/* Associate SNL variables with epics output pv's*/
assign	EV1_CLR_STATS		to	"{SYS}:EV1-CLR-STATS"; 
assign	EV1_INTLCK_STATS	to	"{SYS}:EV1-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	EV1_VC 				to 	"{SYS}:EV1-VC"; 
assign 	EV1_INIT 			to 	"{SYS}:EV1-INIT";
assign 	SSC_W18_STS 		to 	"{SYS}:SSC-W18-STS";   
assign 	SSC_W19_STS 		to 	"{SYS}:SSC-W19-STS";
assign	EV1_FAIL_COND		to	"{SYS}:EV1-FAIL-COND";

monitor	EV1_VC;
monitor SSC_W18_STS;  
monitor SSC_W19_STS;
monitor	EV1_FAIL_COND;

ss EV1_clearance_status {
    state init {
		when (delay(0.8)) {
			initVault();
			printf("%sEXPERIMENTAL VAULT 2 INITIALISATION COMPLETED%s\n",OK,DEF);
		} state watchman_18_pressed	
    }
///////////////////////////////////////////////////////////////
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("%sEXPERIMENTAL VAULT 2 IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (EV1_VC != VCOK) {

		} state vc_faillures
	}
//////////////////////////////////////////////////////////
	state recover_faillure {
		
		when (!EV1_FAIL_COND) {
			if(!EV1Update) {
				printf("%sRECOVERING FROM FAILLURE - ENTERING W18 STATE%s\n",OK,DEF);
				EV1Update = TRUE;
			}
		} state  watchman_18_pressed
			
		when (EV1_FAIL_COND != EV1_OLD_FAIL_COND) {
		} state  clearance_faillures
	}
//////////////////////////////////////////////////////////
	state watchman_18_pressed {

		when (EV1_FAIL_COND != VCOK) {
			EV1_OLD_FAIL_COND = EV1_FAIL_COND;
		} state  clearance_faillures
			
		when (SSC_W18_STS == B18ON) {
			EV1_clear_underway();
			EV1_update_report(B18ON);
		} state watchman_18_released
	}
//////////////////////////////////////////////////////////
	state watchman_18_released {
		
		when (EV1_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
		when (SSC_W18_STS != B18ON) {
		} state door_a7_closed
	}
//////////////////////////////////////////////////////////
	state door_a7_closed {

		when (EV1_FAIL_COND != VCOK) {

		} state   clearance_faillures
		
		when (SSC_W19_STS == DA6S1OFF) {
			EV1_update_report(DA6S1OFF);
		} state door_a7_closed

		when (SSC_W19_STS == DA6S2OFF) {
			EV1_update_report(DA6S2OFF);
		} state door_a7_closed


		when () {
			EV1_update_report(B19OFF);
		} state watchman_19_pressed
	}

///////////////////////////////////////////////////////////
	state watchman_19_pressed {
		
		when (EV1_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
			
		when (!SSC_W19_STS) {

			EV1_status();
		} state vault_cleared
	}
///////////////////////////////////////////////////////////
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("EV1 CLEARANCE FAILURE CONDITION: ");
			EV1Update = FALSE;
		}

		when () {
			EV1_update_failed(EV1_FAIL_COND);
		} state recover_faillure
		
		exit {
		    EV1_OLD_FAIL_COND = EV1_FAIL_COND;	
		}			
	}
////////////////////////////////////////////////////////////////////////////
	state vc_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("EV1 CLEAR FAILURE CONDITION: ");
			EV1Update = FALSE;
		}
		
		when () {			
			EV1_update_failed(EV1_VC);
		} state recover_faillure
		
		exit {
		    EV1_OLD_FAIL_COND = EV1_FAIL_COND;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
	EV1_INIT = TRUE;
	EV1_OLD_FAIL_COND = EV1_FAIL_COND;
	not_cleared(EV1_CLR_STATS);
	report_error(EV1_INTLCK_STATS, 54);
	pvPut(EV1_INIT, SYNC);
	pvPut(EV1_CLR_STATS, SYNC);
	pvPut(EV1_INTLCK_STATS, SYNC);
}

////////////////////////////////////////////////////////////////////////
void EV1_update_failed(short report)
{
	clear_failed(EV1_CLR_STATS);
	pvPut(EV1_CLR_STATS, SYNC);
	report_error(EV1_INTLCK_STATS, report);
	pvPut(EV1_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,EV1_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void EV1_update_report(short intlck) {
	report_error(EV1_INTLCK_STATS, intlck);
	pvPut(EV1_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void EV1_status()
{
	cleared(EV1_CLR_STATS);
	pvPut(EV1_CLR_STATS, SYNC); 		
	report_error(EV1_INTLCK_STATS, 54);
	pvPut(EV1_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void EV1_clear_underway()
{  
	clear_underway(EV1_CLR_STATS);
	pvPut(EV1_CLR_STATS, SYNC); 		
}
//////////////////////////////////////////////////////////////////////////
%{

inline void cleared(string vault_status) {   
    strcpy(vault_status, mes_array[0]); // Area cleared  
}
////////////////////////////////////////////////
inline void not_cleared(string vault_status) {  
   strcpy(vault_status, mes_array[1]); // Area not cleared    
}
///////////////////////////////////////////////
inline void clear_underway(string vault_status) { 
   strcpy(vault_status, mes_array[2]);  // Area clearance underway    
}
//////////////////////////////////////////////
inline void clear_failed(string vault_status) { 
   strcpy(vault_status, mes_array[4]); // Area clearance fail   
}
////////////////////////////////////////////////
inline void report_error(string vault_interlock, short intlock)
{
   strcpy(vault_interlock, mes_array[intlock]);
}
	
}%
