program a13aClearanceSNC
%{
/**********************************************************/
	#include "vcs_var_mes.h"
/**********************************************************/
	#define	VC       	0
	#define TOUT		5
	#define A13APNK     139
	#define	G5AON		140
	#define	G5AS1ON		144
	#define	G5AS2ON		143
	#define	B9bON       142
	#define	B9aON       187
	#define	B9aOFF      141

}%
/* Declare seq variables*/
short A13A_INIT; 
short A13A_SEL_STAGE;

short A13A_VC; 
short A13A_VNCS1;   
short A13A_VNCS2;  

string A13A_CLR_STATS; 
string A13A_INTLCK_STATS;
/* Associate SNL variables with epics output pv's*/
assign	A13A_CLR_STATS		to	"{SYS}:A13A-CLR-STATS"; 
assign	A13A_INTLCK_STATS	to	"{SYS}:A13A-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	A13A_VC 				to 	"{SYS}:A13A-VC"; 
assign 	A13A_VNCS1 			to  "{SYS}:A13A-VNCS1";   
assign 	A13A_VNCS2 			to 	"{SYS}:A13A-VNCS2";
assign 	A13A_INIT 			to 	"{SYS}:A13A-INIT";
assign	A13A_SEL_STAGE		to	"{SYS}:A13A-SEL-STAGE";

monitor	A13A_VC;
monitor	A13A_VNCS1;
monitor	A13A_VNCS2;
monitor	A13A_SEL_STAGE;

ss A13A_clearance_status {
    state init {
		when (delay(4)) {
			initVault();
			printf("A13A VAULT INITIALISATION COMPLETED\n");
		} state vault_nc_stage_1	
    }
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("VERTICAL BEAMLINE VAULT IN CLEARED STATE\n");
		} 
			
		when (A13A_VC == G5AON) {
			A13A_update_failed(G5AON);
			printf("Gate G5A was opened\n");

		} state vault_nc_stage_1

			
		when (A13A_VC == A13APNK) {
			A13A_update_failed(A13APNK);
			printf("Panic button 9a was pressed\n");
		} state vault_nc_stage_1
	}
	
	/*VAULT NOT CLEARED STAGE 1*/
	state vault_nc_stage_1 {

		when (A13A_SEL_STAGE == 3) {
			A13A_clear_underway();
		} state vault_nc_stage_2
		
			
		when(A13A_VNCS1 == B9aON){
			A13A_update_report(B9aON);		
			/*printf("Waiting for Vault Clearance\n");*/
		}state vault_nc_stage_1
	}
	
	/*VAULT NOT CLEARED STAGE 2*/
	state vault_nc_stage_2 {
		
		when (A13A_SEL_STAGE == 1) {
			A13A_status();
		} state vault_cleared
			

		when (A13A_VNCS2 == B9aOFF) {
			A13A_update_report(B9aOFF);
			printf("Watchman 9a must be released\n");
		} state vault_nc_stage_2
			
		
		when (A13A_VNCS2 == TOUT) {
			A13A_update_failed(TOUT);
			printf("TIME OUT ERROR: RELEASE ALL WATCHMEN\n");
		} state vault_nc_stage_1
			
		
		when (A13A_VNCS2 == G5AS1ON) {
			A13A_update_report(G5AS1ON);
			printf("Gate G5A switch 1 is open\n");
		} state vault_nc_stage_1
			
			
		when (A13A_VNCS2 == G5AS2ON) {
			A13A_update_report(G5AS2ON);
			printf("Gate G5A switch 2 is open\n");
		} state vault_nc_stage_1
		
		
		when (A13A_VNCS2 == B9bON) {
			A13A_update_report(B9bON);
			printf("Watchman 9b must be activated\n");
		} state vault_nc_stage_2

	}	
}

void initVault(){
	A13A_INIT = TRUE;
	not_cleared(A13A_CLR_STATS);
	report_error(A13A_INTLCK_STATS, 54);
	pvPut(A13A_INIT, SYNC);
	pvPut(A13A_CLR_STATS, SYNC);
	pvPut(A13A_INTLCK_STATS, SYNC);
}

////////////////////////////////////////////////////////////////////////
void A13A_update_failed(short report)
{
	clear_failed(A13A_CLR_STATS);
	pvPut(A13A_CLR_STATS, SYNC);
	report_error(A13A_INTLCK_STATS, report);
	pvPut(A13A_INTLCK_STATS, SYNC);
}
/////////////////////////////////////////////////////////////////////////
void A13A_update_report(short intlck) {
	report_error(A13A_INTLCK_STATS, intlck);
	pvPut(A13A_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void A13A_status()
{  
	cleared(A13A_CLR_STATS);
	pvPut(A13A_CLR_STATS, SYNC); 		
	report_error(A13A_INTLCK_STATS, 54);
	pvPut(A13A_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void A13A_clear_underway()
{  
	clear_underway(A13A_CLR_STATS);
	pvPut(A13A_CLR_STATS, SYNC); 		
}
