program bsvClearanceSNC

%{
/*******************************************************************/
#include "vcs_var_mes.h" // define this here so C functions are seen
/*******************************************************************/
#define	VCOK       	0
#define FAIL		-1
#define	B37OFF      131
#define	B36ON      	130
#define DA15S1OFF	132 
#define DA15S2OFF	133
}%
/* Declare seq variables*/
short BSV_INIT; 
short BSV_VC;   
short BSV_W36_STS;
short BSV_W37_STS;
short BSV_FAIL_COND;
string BSV_CLR_STATS; 
string BSV_INTLCK_STATS;
// CONTROL FLAGS
short BSVUpdate;
short BSV_OLD_FAIL_COND;

/* Associate SNL variables with epics output pv's*/
assign	BSV_CLR_STATS		to	"{SYS}:BSV-CLR-STATS"; 
assign	BSV_INTLCK_STATS	to	"{SYS}:BSV-INTLCK-STATS"; 
/* Associate SNL variables with epics input pv's*/
assign 	BSV_VC 				to 	"{SYS}:BSV-VC"; 
assign 	BSV_INIT 			to 	"{SYS}:BSV-INIT";
assign 	BSV_W36_STS 		to 	"{SYS}:BSV-W36-STS";   
assign 	BSV_W37_STS 		to 	"{SYS}:BSV-W37-STS";
assign	BSV_FAIL_COND		to	"{SYS}:BSV-FAIL-COND";

monitor	BSV_VC;
monitor BSV_W36_STS;  
monitor BSV_W37_STS;
monitor	BSV_FAIL_COND;

ss BSV_clearance_status {
    state init {
		when (delay(7.0)) {
			initVault();
			printf("%sBEAM SWINGER VAULT INITIALISATION COMPLETED%s\n",OK,DEF);
		} state watchman_36_pressed	
    }
///////////////////////////////////////////////////////////////
	/*VAULT CLEARED STATE*/
    state vault_cleared {
		option -e;
		entry {
			printf("%sBEAM SWINGER VAULT IN CLEARED STATE%s\n",CLR,DEF);
		} 
		when (BSV_VC != VCOK) {

		} state vc_faillures
	}
//////////////////////////////////////////////////////////
	state recover_faillure {
		
		when (!BSV_FAIL_COND) {
			if(!BSVUpdate) {
				printf("%sRECOVERING FROM FAILLURE - ENTERING W36 STATE%s\n",OK,DEF);
				BSVUpdate = TRUE;
			}
		} state  watchman_36_pressed
			
		when (BSV_FAIL_COND != BSV_OLD_FAIL_COND) {
		} state  clearance_faillures
	}
//////////////////////////////////////////////////////////
	state watchman_36_pressed {

		when (BSV_FAIL_COND != VCOK) {
			BSV_OLD_FAIL_COND = BSV_FAIL_COND;
		} state  clearance_faillures
			
		when (BSV_W36_STS == B36ON) {
			BSV_clear_underway();
			BSV_update_report(B36ON);
		} state watchman_36_released
	}
//////////////////////////////////////////////////////////
	state watchman_36_released {
		
		when (BSV_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
		when (BSV_W36_STS != B36ON) {
		} state door_a15_closed
	}
//////////////////////////////////////////////////////////
	state door_a15_closed {

		when (BSV_FAIL_COND != VCOK) {

		} state   clearance_faillures
		
		when (BSV_W37_STS == DA15S1OFF) {
			BSV_update_report(DA15S1OFF);
		} state door_a15_closed

		when (BSV_W37_STS == DA15S2OFF) {
			BSV_update_report(DA15S2OFF);
		} state door_a15_closed


		when () {
			BSV_update_report(B37OFF);
		} state watchman_37_pressed
	}

///////////////////////////////////////////////////////////
	state watchman_37_pressed {
		
		when (BSV_FAIL_COND != VCOK) {

		} state  clearance_faillures
			
			
		when (!BSV_W37_STS) {

			BSV_status();
		} state vault_cleared
	}
///////////////////////////////////////////////////////////
	state clearance_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("BSV CLEARANCE FAILURE CONDITION: ");
			BSVUpdate = FALSE;
		}

		when () {
			BSV_update_failed(BSV_FAIL_COND);
		} state recover_faillure
		
		exit {
		    BSV_OLD_FAIL_COND = BSV_FAIL_COND;	
		}			
	}
////////////////////////////////////////////////////////////////////////////
	state vc_faillures { 			/* FAIL CONDITIONS*/
		
		option -e;
		option -x;
		entry {
			printf("BSV CLEAR FAILURE CONDITION: ");
			BSVUpdate = FALSE;
		}
		
		when () {			
			BSV_update_failed(BSV_VC);
		} state recover_faillure
		
		exit {
		    BSV_OLD_FAIL_COND = BSV_FAIL_COND;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void initVault(){
	BSV_INIT = TRUE;
	BSV_OLD_FAIL_COND = BSV_FAIL_COND;
	not_cleared(BSV_CLR_STATS);
	report_error(BSV_INTLCK_STATS, 54);
	pvPut(BSV_INIT, SYNC);
	pvPut(BSV_CLR_STATS, SYNC);
	pvPut(BSV_INTLCK_STATS, SYNC);
}

////////////////////////////////////////////////////////////////////////
void BSV_update_failed(short report)
{
	clear_failed(BSV_CLR_STATS);
	pvPut(BSV_CLR_STATS, SYNC);
	report_error(BSV_INTLCK_STATS, report);
	pvPut(BSV_INTLCK_STATS, SYNC);
	printf("%s%s%s\n",ERROR,BSV_INTLCK_STATS,DEF);
}
/////////////////////////////////////////////////////////////////////////
void BSV_update_report(short intlck) {
	report_error(BSV_INTLCK_STATS, intlck);
	pvPut(BSV_INTLCK_STATS, SYNC);
}
////////////////////////////////////////////////////////////////////////
void BSV_status()
{
	cleared(BSV_CLR_STATS);
	pvPut(BSV_CLR_STATS, SYNC); 		
	report_error(BSV_INTLCK_STATS, 54);
	pvPut(BSV_INTLCK_STATS, SYNC);
}
///////////////////////////////////////////////////////////
void BSV_clear_underway()
{  
	clear_underway(BSV_CLR_STATS);
	pvPut(BSV_CLR_STATS, SYNC); 		
}
